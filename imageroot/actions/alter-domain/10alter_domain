#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import mail
import agent
from sqlite3 import IntegrityError

class DomainNotFoundError(Exception):
    pass

request = json.load(sys.stdin)

sdb = mail.pcdb_connect()

domain = request['domain']

try:
    cur = sdb.cursor()

    if 'catchall' in request:
        if request['catchall'] is None:
            catchall = None
        else:
            catchall = mail.destination_to_mailbox(request['catchall'])

        cur.execute("""UPDATE domains SET catchall=? WHERE domain=?""", (catchall, domain))

    if 'addusers' in request:
        cur.execute("""UPDATE domains SET addusers=? WHERE domain=?""", (request['addusers'], domain))

    if 'addgroups' in request:
        cur.execute("""UPDATE domains SET addgroups=? WHERE domain=?""", (request['addgroups'], domain))

    if 'bccaddr' in request:
        cur.execute("""UPDATE domains SET bccaddr=? WHERE domain=?""", (request['bccaddr'], domain))

    if 'description' in request:
        cur.execute("""UPDATE domains SET ddesc=? WHERE domain=?""", (request['description'], domain))

    if cur.rowcount == 0:
        raise DomainNotFoundError()

except DomainNotFoundError:
    sdb.rollback()
    agent.set_status('validation-failed')
    json.dump([{'field': 'domain', 'parameter': 'domain', 'value': request['domain'], 'error':'domain_not_found'}], fp=sys.stdout)
    sys.exit(2)

except mail.MailDestinationNotFound:
    sdb.rollback()
    agent.set_status('validation-failed')
    json.dump([{'field':'catchall', 'parameter':'catchall','value': request['catchall'], 'error':'catchall_mailbox_not_found'}], fp=sys.stdout)
    sys.exit(3)

else:
    sdb.commit()

finally:
    sdb.close()

domains = mail.get_domains()
json.dump(domains[domain], fp=sys.stdout, cls=mail.DestEncoder)
