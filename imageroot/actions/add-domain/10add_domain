#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import sys
import mail
import agent
from sqlite3 import IntegrityError

request = json.load(sys.stdin)

sdb = mail.pcdb_connect()

try:
    if 'catchall' in request and request['catchall'] is not None:
        catchall = mail.destination_to_mailbox(request['catchall'])
    else:
        catchall = None

    values = {
        "domain": request['domain'],
        "addusers": request.get('addusers', False),
        "addgroups": request.get('addgroups', False),
        "catchall": catchall,
        "bccaddr": request.get("bccaddr", None),
        "ddesc": request.get("description", ""),
    }

    cur = sdb.cursor()
    cur.execute("""INSERT INTO domains (domain, addusers, addgroups, catchall, bccaddr, ddesc) VALUES (:domain, :addusers, :addgroups, :catchall, :bccaddr, :ddesc)""", values)

except IntegrityError:
    sdb.rollback()
    # The domain already exists
    agent.set_status('validation-failed')
    json.dump([{'field':'domain', 'parameter':'domain','value': request['domain'], 'error':'mail_domain_already_exists'}], fp=sys.stdout)
    sys.exit(3)

except mail.MailDestinationNotFound:
    sdb.rollback()
    agent.set_status('validation-failed')
    json.dump([{'field':'catchall', 'parameter':'catchall','value': request['catchall'], 'error':'catchall_mailbox_not_found'}], fp=sys.stdout)
    sys.exit(2)

else:
    sdb.commit()

finally:
    sdb.close()
