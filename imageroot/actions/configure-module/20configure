#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import os
import socket
import string
import secrets
from agent.ldapproxy import Ldapproxy

if os.environ['AGENT_TASK_ACTION'] == 'configure-module':
    # configure-module: read from stdin
    request = json.load(sys.stdin)
    udomname = request['user_domain']
    hostname = request['hostname']
else:
    # restore/import-module: read from environment
    udomname = os.environ['POSTFIX_ORIGIN']
    hostname = os.environ['MAIL_HOSTNAME']

try:
    odom = Ldapproxy().get_domain(udomname)
    'host' in odom # Throw exception if odom is None
except:
    # During restore the domain could be unavailable. Use a fallback
    # configuration, pointing to nowhere, just to set the variables.
    # Once the domain becomes available, the event will fix them.
    odom = {
        'host': '127.0.0.1',
        'port': 0,
        'schema': 'rfc2307',
        'location': 'internal',
        'base_dn': 'dc=dovecot,dc=invalid',
        'bind_dn': 'cn=example,dc=dovecot,dc=invalid',
        'bind_password': 'invalid',
    }

with agent.redis_connect() as rdb:
    cluster_network = rdb.get('cluster/network') or ""

if not os.path.exists('dovecot.env'):
    # Generate a persistent random token for Dovecot admin HTTP API
    alphabet = string.ascii_letters + string.digits + '%@-+_^,./'
    dovecot_api_key = ''.join([secrets.choice(alphabet) for i in range(32)])
    dovecot_vmail_pass = ''.join([secrets.choice(alphabet) for i in range(32)])
    dovecot_spamt_pass = agent.read_envfile('rspamd.env')['RSPAMD_spamtpw']
    oldmask = os.umask(0o77)
    with open('dovecot.env', 'w') as fenv:
        print("DOVECOT_API_KEY=" + dovecot_api_key, file=fenv)
        print("DOVECOT_VMAIL_PASS=" + dovecot_vmail_pass, file=fenv)
        print("DOVECOT_SPAMT_PASS=" + dovecot_spamt_pass, file=fenv)
    os.umask(oldmask)

if not 'DOVECOT_QUOTA_MB' in os.environ:
    # First configuration default settings
    agent.set_env('DOVECOT_QUOTA_MB', "0") # Enable quota with no limit
    agent.set_env('DOVECOT_SPAM_RETENTION', "15") # Enable the feature with 15 days retention
    agent.set_env('DOVECOT_SPAM_FOLDER', 'Junk') # Default spam folder name, enabled
    agent.set_env('DOVECOT_SPAM_SUBJECT_PREFIX', '') # Default spam subject prefix: empty - disabled

agent.set_env('MAIL_HOSTNAME', hostname)
agent.set_env('DOVECOT_LDAP_HOST', odom['host'])
agent.set_env('DOVECOT_LDAP_PORT', odom['port'])
agent.set_env('DOVECOT_LDAP_USER', odom['bind_dn'])
agent.set_env('DOVECOT_LDAP_PASS', odom['bind_password'])
agent.set_env('DOVECOT_LDAP_SCHEMA', odom['schema'])
agent.set_env('DOVECOT_LDAP_BASE', odom['base_dn'])
agent.set_env('DOVECOT_INSTANCE_NAME', os.environ['MODULE_ID'])
if not os.getenv('DOVECOT_TRUSTED_NETWORKS'):
    agent.set_env('DOVECOT_TRUSTED_NETWORKS', cluster_network)

agent.set_env('POSTFIX_LDAP_HOST', odom['host'])
agent.set_env('POSTFIX_LDAP_PORT', odom['port'])
agent.set_env('POSTFIX_LDAP_USER', odom['bind_dn'])
agent.set_env('POSTFIX_LDAP_PASS', odom['bind_password'])
agent.set_env('POSTFIX_LDAP_SCHEMA', odom['schema'])
agent.set_env('POSTFIX_LDAP_BASE', odom['base_dn'])
agent.set_env('POSTFIX_SYSLOG_NAME', os.environ['MODULE_ID'])
if not os.getenv('POSTFIX_TRUSTED_NETWORK'):
    agent.set_env('POSTFIX_TRUSTED_NETWORK', cluster_network)
agent.set_env('POSTFIX_HOSTNAME', hostname)
agent.set_env('POSTFIX_ORIGIN', udomname)

agent.dump_env() # Save to environment file before starting the systemd unit
