#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import mail

class AddressNotFoundError(Exception):
    pass

request = json.load(sys.stdin)

def alter_userattrs():
    sdb = mail.pcdb_connect()
    try:
        cur = sdb.cursor()

        mail.destination_to_mailbox({"dtype":"user","name":local}) # Just throw exception if user can't be found

        if 'internal' in request:
            internal = 1 if request['internal'] else 0
            cur.execute("""UPDATE userattrs SET internal = ? WHERE user = ?""", (internal, local,))
            if cur.rowcount == 0:
                cur.execute("""INSERT INTO userattrs (user, internal) VALUES (?, ?)""", (local, internal,))

    except mail.MailDestinationNotFound:
        sdb.rollback()
        agent.set_status('validation-failed')
        json.dump([{'field':'local', 'parameter':'local','value': local, 'error':'user_not_found'}], fp=sys.stdout)
        sys.exit(3)

    else:
        sdb.commit()

    finally:
        sdb.close()

def alter_groupattrs():
    sdb = mail.pcdb_connect()
    try:
        cur = sdb.cursor()

        mail.destination_to_mailbox({"dtype":"group","name":local}) # Just throw exception if group can't be found

        if 'internal' in request:
            internal = 1 if request['internal'] else 0
            cur.execute("""UPDATE groupattrs SET internal = ? WHERE "group" = ?""", (internal, local,))
            if cur.rowcount == 0:
                cur.execute("""INSERT INTO groupattrs ("group", internal) VALUES (?, ?)""", (local, internal,))

    except mail.MailDestinationNotFound:
        sdb.rollback()
        agent.set_status('validation-failed')
        json.dump([{'field':'local', 'parameter':'local','value': local, 'error':'group_not_found'}], fp=sys.stdout)
        sys.exit(3)

    else:
        sdb.commit()

    finally:
        sdb.close()

def alter_address():
    sdb = mail.pcdb_connect()

    try:
        cur = sdb.cursor()

        if 'destinations' in request:
            cur.execute("""DELETE FROM destmap WHERE alocal=? AND domain=?""", (local, domain,))
            if cur.rowcount == 0:
                raise AddressNotFoundError()

            for odest in request['destinations']:
                sdest = mail.destination_to_mailbox(odest)
                cur.execute("""INSERT INTO destmap (alocal,domain,dest) VALUES (?,?,?)""", (local, domain, sdest,))

        if 'description' in request:
            cur.execute("""UPDATE addresses SET adesc=? WHERE alocal=? AND domain=?""", (request['description'], local, domain,))
            if cur.rowcount == 0:
                raise AddressNotFoundError()

        if 'internal' in request:
            internal = 1 if request['internal'] else 0
            cur.execute("""UPDATE addresses SET internal=? WHERE alocal=? AND domain=?""", (internal, local, domain,))
            if cur.rowcount == 0:
                raise AddressNotFoundError()

    except mail.MailDestinationNotFound:
        sdb.rollback()
        agent.set_status('validation-failed')
        json.dump([{'field':'destinations', 'parameter':'destinations','value': odest, 'error':'address_destination_not_found'}], fp=sys.stdout)
        sys.exit(3)

    except AddressNotFoundError as ex:
        sdb.rollback()
        agent.set_status('validation-failed')
        json.dump([{'field': 'local', 'parameter': 'local', 'value': local, 'error':'address_not_found'}], fp=sys.stdout)
        sys.exit(2)

    else:
        sdb.commit()

    finally:
        sdb.close()

local = request['local']
if request['atype'] == "domain":
    domain = request['domain']
    alter_address()
elif request['atype'] == "wildcard":
    domain = "*"
    alter_address()
elif request['atype'] == "adduser":
    alter_userattrs()
elif request['atype'] == "addgroup":
    alter_groupattrs()
else:
    raise Exception(f"Unexpected atype {request['atype']} value")
