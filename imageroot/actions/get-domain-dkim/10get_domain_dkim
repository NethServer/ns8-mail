#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import mail
import agent
import subprocess
import os

request = json.load(sys.stdin)
odata = {
    "enabled": False,
}

selectors_map = mail.rspamd_api_get_kvmap('dkim_selectors.map')

# find selector for the given domain, fallback to DKIM "default" selector
selector = selectors_map.get(request['domain'], "default")

is_enabled = not ('.' in selector or '/' in selector or selector.lower().startswith('disabled ')) # not-disabled
if not is_enabled and selector.lower().startswith('disabled '):
    selector = selector.lower().removeprefix('disabled ').strip()

pcat = subprocess.run(f'podman exec rspamd cat /var/lib/rspamd/dkim/{selector}.txt', stdout=subprocess.PIPE, stderr=sys.stderr, shell=True, text=True)

# Transform PEM-encoded public key in a base64 plain string:
prsa = subprocess.run(f'podman exec rspamd cat /var/lib/rspamd/dkim/{selector}.key | openssl rsa -pubout -outform PEM', stdout=subprocess.PIPE, stderr=sys.stderr, shell=True, text=True)
pubkey = ''
for pemline in prsa.stdout.split(os.linesep):
    if pemline == '' or pemline.startswith('----'):
        continue
    pubkey += pemline

if pubkey and pcat.stdout:
    odata = {
        "enabled": is_enabled,
        "dkimRecordData": f"v=DKIM1; k=rsa; p={pubkey}",
        "dkimFullRawRecord": pcat.stdout,
    }

json.dump(odata, fp=sys.stdout)
