#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import sys
import agent
import mail
from sqlite3 import IntegrityError

request = json.load(sys.stdin)
sdb = mail.pcdb_connect()
mbxn = request['mailbox']
rights_map = mail.get_rights_map()

try:

    # Create the address object pointing to the new mailbox:
    cur = sdb.cursor()
    cur.execute("""INSERT INTO destmap (alocal,domain,dest) VALUES (?,?,?)""", (mbxn, "*", "vmail+" + mbxn,))
    cur.execute("""INSERT INTO addresses (alocal, domain) VALUES (?, ?)""", (mbxn, "*",))

    mail.doveadm_query("mailboxCreate", {"mailbox": [mbxn], "user": "vmail"})

    for qacl in request['acls']:
        if qacl['stype'] == 'user':
            subject = 'user=' + mail.destination_to_mailbox(qacl['subject'])
        elif qacl['stype'] == 'group':
            subject = 'group=' + mail.destination_to_mailbox(qacl['subject'])
        else:
            continue # ignore invalid stype: rely on JSON schema validation

        if qacl['rights']['rtype'] in rights_map:
            acl_values = list(rights_map[qacl['rights']['rtype']]) # use a preset
        else:
            acl_values = qacl['rights']['values'] # custom list fallback

        mail.doveadm_query("aclSet", {"user": "vmail", "mailbox": mbxn, "id": subject, "right": acl_values})

except mail.DoveadmError as dex:
    if dex.code != 65:
        raise

    agent.set_status('validation-failed')
    json.dump([{'field':'mailbox', 'parameter':'mailbox','value': mbxn, 'error':'mailbox_already_exists'}], fp=sys.stdout)
    sys.exit(3)

except IntegrityError as iex:
    sdb.rollback()
    # Address exists
    agent.set_status('validation-failed')
    json.dump([{'field':'mailbox', 'parameter':'mailbox','value': mbxn, 'error':'address_already_exists'}], fp=sys.stdout)
    sys.exit(3)

else:
    sdb.commit()

finally:
    sdb.close()
