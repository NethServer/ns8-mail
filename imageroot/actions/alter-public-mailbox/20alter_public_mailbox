#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import mail

request = json.load(sys.stdin)
mbxn = request['mailbox']
rights_map = mail.get_rights_map()

try:
    for cacl in mail.doveadm_query("aclGet", {"user": "vmail", "mailbox": mbxn}): # Delete existing ACLs
        mail.doveadm_query("aclDelete", {"user": "vmail", "mailbox": mbxn, "id": cacl['id']})

    for qacl in request['acls']: # Set new ACLs
        if qacl['stype'] == 'user':
            subject = 'user=' + mail.destination_to_mailbox(qacl['subject'])
        elif qacl['stype'] == 'group':
            subject = 'group=' + mail.destination_to_mailbox(qacl['subject'])
        else:
            continue # ignore invalid stype: rely on JSON schema validation

        if qacl['rights']['rtype'] in rights_map:
            acl_values = list(rights_map[qacl['rights']['rtype']]) # use a preset
        else:
            acl_values = qacl['rights']['values'] # custom list fallback

        mail.doveadm_query("aclSet", {"user": "vmail", "mailbox": mbxn, "id": subject, "right": acl_values})

except mail.DoveadmError as dex:
    if dex.code != 68:
        raise

    agent.set_status('validation-failed')
    json.dump([{'field':'mailbox', 'parameter':'mailbox','value': mbxn, 'error':'mailbox_not_found'}], fp=sys.stdout)
    sys.exit(3)

except mail.MailDestinationNotFound as mex:
    agent.set_status('validation-failed')
    json.dump([{'field':'acls', 'parameter':'acls','value': qacl['subject']['name'], 'error':'acl_subject_not_found'}], fp=sys.stdout)
    sys.exit(4)
