#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import mail
import agent
import os
from sqlite3 import IntegrityError

request = json.load(sys.stdin)

gquota = os.getenv("DOVECOT_QUOTA_MB", "")

class CustomQuotaOverlapError(Exception):
    pass

sdb = mail.pcdb_connect()
try:
    cur = sdb.cursor()

    mail.destination_to_mailbox({"dtype":"user","name": request['user']}) # Just throw exception if user can't be found

    if 'quota' in request:
        if 'custom' in request['quota'] and request['quota']['custom'] is False:
            # Unset the custom quota limit
            try:
                mail.doveadm_query("dictUnset", {
                    "dictUri":"fs:posix:prefix=/var/lib/dovecot/dict/uquota/",
                    "key":"shared/" + request['user'],
                })
            except mail.DoveadmError as dex:
                if dex.code == 75:
                    pass
        else:
            # Set the custom quota limit value in the Dovecot dict DB
            limit = str(request['quota']['limit'])
            if limit == gquota:
                raise CustomQuotaOverlapError()

            mail.doveadm_query("dictSet", {
                "dictUri":"fs:posix:prefix=/var/lib/dovecot/dict/uquota/",
                "key":"shared/" + request['user'],
                "value": limit,
            })

    if 'spam_retention' in request:
        if 'custom' in request['spam_retention'] and request['spam_retention']['custom'] is False:
            # Unset the custom spam retention
            try:
                mail.doveadm_query("dictUnset", {
                    "dictUri": "file:/var/lib/dovecot/dict/uspamret.db",
                    "key":"shared/spam_retention/" + request['user'],
                })
            except mail.DoveadmError as dex:
                if dex.code == 75:
                    pass
        else:
            # Set the custom spam retention value in the Dovecot dict DB
            spamret = str(request['spam_retention']['value'])
            mail.doveadm_query("dictSet", {
                "dictUri": "file:/var/lib/dovecot/dict/uspamret.db",
                "key":"shared/spam_retention/" + request['user'],
                "value": spamret,
            })

    if 'forward' in request:
        cur.execute("""DELETE FROM userforwards WHERE user = ?""", (request['user'],))
        tuples = set()

        for odest in request['forward'].get('destinations', []):
            tuples.add((request['user'], mail.destination_to_mailbox(odest),))

        if request['forward'].get('keepcopy', False) == True and len(tuples) > 0:
            tuples.add((request['user'], request['user'],))

        cur.executemany("""INSERT INTO userforwards (user, dest) VALUES (?, ?)""", tuples)

except mail.MailDestinationNotFound:
    sdb.rollback()
    agent.set_status('validation-failed')
    json.dump([{'field':'user', 'parameter':'user','value': request['user'], 'error':'user_not_found'}], fp=sys.stdout)
    sys.exit(2)

except CustomQuotaOverlapError:
    sdb.rollback()
    agent.set_status('validation-failed')
    json.dump([{'field':'limit', 'parameter':'limit','value': request['quota']['limit'], 'error':'invalid_custom_quota_sameas_default_value'}], fp=sys.stdout)
    sys.exit(3)

else:
    sdb.commit()

finally:
    sdb.close()
