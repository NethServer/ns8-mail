#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import mail
import agent
import os

def get_cus_rating():
    return os.getenv('CLAMAV_CUS_RATING', 'MEDIUM').lower()

odata =  {
    "bypass_rules":0,
    "antivirus": {"enabled": False},
    "antispam": {"enabled": False},
}

if not os.path.exists("rspamd.env"):
    # The module is still not configured, exit now
    json.dump(odata, fp=sys.stdout)
    sys.exit(0)

# count of bypass_rules, removing duplicated entries:
odata["bypass_rules"] = sum([len(set(l)) for l in mail.rspamd_get_bypass_maps().values()])

#
# antivirus
#
odata["antivirus"]["enabled"] = mail.is_clamav_enabled()
odata["antivirus"]["clamav_official_sigs"] = agent.run_helper('systemctl', '--user', 'is-enabled', 'freshclam.timer').returncode == 0
odata["antivirus"]["third_party_sigs_rating"] = get_cus_rating()
odata["antivirus"]["memory_info"] = mail.get_system_meminfo()

#
# antispam
#
odata["antispam"]["enabled"] = bool(os.getenv('RSPAMD_antispam_checks_enabled'))
odata["antispam"]["rspamd_url"] = f"https://{os.getenv('POSTFIX_HOSTNAME')}/rspamd/"
thm = mail.rspamd_api_get_thresholds()
greylist_fallback_threshold = float(thm.get('add header', 6.0)) / 2.0
odata["antispam"]["spam_flag_threshold"] = float(thm['add header'])
odata["antispam"]["deny_message_threshold"] = float(thm['reject'])
odata["antispam"]["greylist"] = {
    "enabled": bool(os.getenv('RSPAMD_greylist_enabled')),
    "threshold": thm.get("greylist", greylist_fallback_threshold),
}

json.dump(odata, fp=sys.stdout)
