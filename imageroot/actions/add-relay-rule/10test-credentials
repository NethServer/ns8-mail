#!/usr/bin/env python3

# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#


import agent
import agent.tasks
import os
import sys
import json
import smtplib
import ssl
import mail


data = json.load(sys.stdin)

username = data['username']
password = data['password']
sender = data.get('sender')
recipient = data.get('recipient')

# if the username is empty, we do not need to validate
if not username:
    sys.exit(0)

def get_password_from_database(sender_or_recipient):
    # Function to query the database for the password based on sender or recipient
    sdb = mail.pcdb_connect()
    cur = sdb.cursor()
    cur.execute("SELECT password FROM relayrules WHERE sender=? OR dest=?", (sender_or_recipient, sender_or_recipient))
    result = cur.fetchone()
    sdb.close()
    if result:
        return result[0]
    else:
        agent.set_status('validation-failed')
        json.dump([{'field':'test_rule_credentials','parameter':'test_rule_credentials','value':'cannot_retrieve_password_user_from_sqlite','error':'cannot_retrieve_password_user_from_sqlite'}],fp=sys.stdout, default=str)
        sys.exit(6)

# password not changed, we need to retrieve it from the database
if sender and password == '':
    password = get_password_from_database(sender)
elif recipient and password == '':
    password = get_password_from_database(recipient)

port =  int(data['port'])
host = data['host']
tls = data['mandatory_tls']

# do not verify the hostname and the certificate
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

try :
    if tls:
        smtp = smtplib.SMTP(host, port=port, timeout=10)
        smtp.starttls(context=ctx)
    else:
        smtp = smtplib.SMTP(host, port=port, timeout=10)

    # we have a login, we try to authenticate.
    if username:
        smtp.login(username, password)
    # without authentication, we have now way to test except 
    # to connect to the server. we quit
    smtp.quit()

except smtplib.SMTPAuthenticationError as err:
    agent.set_status('validation-failed')
    # probably name or password failure
    json.dump([{'field':'test_rule_credentials','parameter':'test_rule_credentials','value':err,'error':'cannot_authenticate_to_server'}],fp=sys.stdout, default=str)
    sys.exit(2)

except smtplib.SMTPConnectError as err:
    agent.set_status('validation-failed')
    # any connection error to the server
    json.dump([{'field':'test_rule_credentials','parameter':'test_rule_credentials','value':err,'error':'cannot_connect_to_server'}],fp=sys.stdout, default=str)
    sys.exit(3)

except smtplib.SMTPNotSupportedError as err:
    agent.set_status('validation-failed')
    # probably need to use starttls
    json.dump([{'field':'test_rule_credentials','parameter':'test_rule_credentials','value':err,'error':'connection_not_supported_by_server'}],fp=sys.stdout, default=str)
    sys.exit(4)

except smtplib.socket.error as err:
    agent.set_status('validation-failed')
    # We have issued a timeout, the server is not responding or the URL is wrong
    json.dump([{'field':'test_rule_credentials','parameter':'test_rule_credentials','value':err,'error':'connection_timeout_error'}],fp=sys.stdout, default=str)
    sys.exit(5)
