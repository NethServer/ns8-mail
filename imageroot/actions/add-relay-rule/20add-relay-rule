#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import mail
import agent

request = json.load(sys.stdin)

sdb = mail.pcdb_connect()
rule_type = request['rule_type']
rule_subject = request['rule_subject']
username = request.get("username", "")
password = request.get("password", "")
host = request['host']
port = int(request['port'])
mandatory_tls = request.get("mandatory_tls", False)

# probe we could connect to the smtp server and retrieve if we use smtp or smtps
probe_credentials = mail.probe_and_validate_smtp_credentials(username, password, host, port, mandatory_tls)
transport_is_smtps = probe_credentials['transport_smtps']

try:
    values = {
        "rule_type": rule_type,
        "rule_subject": rule_subject,
        "transport": 'smtps' if transport_is_smtps else 'smtp',
        "host": request['host'],
        "port": request['port'],
        "mandatory_tls": 'encrypt' if request.get("mandatory_tls", False) else 'may',
        "username": request.get("username", ""),
        "password": request.get("password", ""),
        "enabled": 1 if request.get("enabled", True) else 0
    }

    cur = sdb.cursor()
    # ensure that the rule_subject does not exist
    cur.execute("SELECT * FROM relayrules WHERE rule_subject = ?", (rule_subject,))
    row = cur.fetchone()
    if row:
        agent.set_status('validation-failed')
        json.dump([{'field':'rule_subject', 'parameter':'rule_subject','value': rule_subject, 'error':'rule_subject_already_exist_cannot_be_used_more'}], fp=sys.stdout)
        sys.exit(4)
    elif rule_subject == '*' and rule_type != 'wildcard':
        agent.set_status('validation-failed')
        json.dump([{'field':'rule_subject', 'parameter':'rule_subject','value': rule_subject, 'error':'rule_type_must_be_wildcard'}], fp=sys.stdout)
        sys.exit(5)
    elif rule_subject != '*' and rule_type == 'wildcard':
        agent.set_status('validation-failed')
        json.dump([{'field':'rule_subject', 'parameter':'rule_subject','value': rule_subject, 'error':'rule_subject_must_be_*'}], fp=sys.stdout)
        sys.exit(5)
    cur.execute("""INSERT INTO relayrules (rule_type, rule_subject, transport, host, port, tls, username, password, enabled) VALUES (:rule_type, :rule_subject, :transport, :host, :port, :mandatory_tls, :username, :password, :enabled)""", values)

except Exception as err:
    sdb.rollback()
    agent.set_status('validation-failed')
    json.dump([{'field':'rule_subject', 'parameter':'rule_subject','value': str(err), 'error':'sender_data_cannot_be_saved_in_db'}], fp=sys.stdout)
    sys.exit(3)
else:
    sdb.commit()

finally:
    sdb.close()
