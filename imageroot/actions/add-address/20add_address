#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import mail
from sqlite3 import IntegrityError

request = json.load(sys.stdin)

sdb = mail.pcdb_connect()

local = request['local']
if request['atype'] == "domain":
    domain = request['domain']
elif request['atype'] == "wildcard":
    domain = "*"
else:
    raise Exception(f"Unexpected atype {request['atype']} value")

try:
    cur = sdb.cursor()

    for odest in request['destinations']:
        sdest = mail.destination_to_mailbox(odest)
        cur.execute("""INSERT INTO destmap (alocal,domain,dest) VALUES (?,?,?)""", (local, domain, sdest,))

    cur.execute("""DELETE FROM addresses WHERE alocal=? AND domain=?""", (local, domain,))
    cur.execute("""INSERT INTO addresses (alocal, domain, internal, adesc) VALUES (?, ?, ?, ?)""", (
        local,
        domain,
        1 if request.get("internal") == True else 0,
        request.get("description", ""),
    ))

except mail.MailDestinationNotFound:
    sdb.rollback()
    agent.set_status('validation-failed')
    json.dump([{'field':'destinations', 'parameter':'destinations','value': odest, 'error':'address_destination_not_found'}], fp=sys.stdout)
    sys.exit(4)

except IntegrityError as iex:
    sdb.rollback()
    if 'FOREIGN KEY' in str(iex):
        # Domain not found
        agent.set_status('validation-failed')
        json.dump([{'field':'domain', 'parameter':'domain','value': request['domain'], 'error':'mail_domain_not_found'}], fp=sys.stdout)
        sys.exit(2)
    else:
        # Address exists
        agent.set_status('validation-failed')
        json.dump([{'field':'local', 'parameter':'local','value': request['local'], 'error':'address_already_exists'}], fp=sys.stdout)
        sys.exit(3)

else:
    sdb.commit()

finally:
    sdb.close()
