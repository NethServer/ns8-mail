#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import sys
import mail
import os

mailboxes = {}

rights_map = mail.get_rights_map()

def get_acls(mbxn):
    lacls = []
    for dacl in mail.doveadm_query("aclGet", {"user": "vmail", "mailbox": mbxn}):
        rights_set = set(dacl['rights'].split(" "))
        if dacl['id'].startswith('user='):
            idx = dacl['id'].removeprefix('user=')
            oacl = {
                "stype": "user",
                "subject": mail.mailbox_to_destination(idx),
            }
        elif dacl['id'].startswith('group='):
            idx = dacl['id'].removeprefix('group=')
            oacl = {
                "stype": "group",
                "subject": mail.mailbox_to_destination(idx),
            }
        else:
            oacl = {
                "stype": "none",
                "subject": {
                    "dtype": "apo",
                    "name": dacl['id'],
                }
            }

        for xright in rights_map:
            if rights_set == rights_map[xright]:
                oacl['rights'] = {
                    "rtype": xright,
                    "values": list(rights_set),
                }
                break
        else:
            oacl['rights'] = {
                "rtype": "custom",
                "values": list(rights_set),
            }

        lacls.append(oacl)

    return lacls

for mbxn in mail.get_public_mailboxes():
    mailboxes[mbxn] = {
        "mailbox": mbxn,
        "acls": get_acls(mbxn),
    }

json.dump(list(mailboxes.values()), fp=sys.stdout, cls=mail.DestEncoder)
