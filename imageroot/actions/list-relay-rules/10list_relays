#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import mail
from sqlite3 import OperationalError

mail.abort_with_json_if_not_configured([])

sdb = mail.pcdb_connect(readonly=True)

rules = []
has_wildcard =  False
try:
    for row in sdb.execute("""SELECT rule_type, rule_subject, host, port, tls, username, password, enabled FROM relayrules where rule_type in ('sender', 'recipient', 'wildcard')"""):
        if row['rule_subject'] == '*':
            has_wildcard = True
        rules.append({
            'rule_type': row['rule_type'],
            'rule_subject': row['rule_subject'],
            'host': row['host'],
            'port': row['port'],
            'tls': row['tls'] == "encrypt",
            'username': row['username'],
            'has_password': True if row['password'] != '' else False,
            'enabled': row['enabled'] == 1
        })
except OperationalError:
    rules = []

# we want to order rules by sender, recipient, wildcard
def custom_sort(rule):
    # If it's a sender rule
    if rule['rule_type'] == 'sender' and '@' in rule['rule_subject']:
        return (2, rule['rule_subject'])
    elif rule['rule_type'] == 'sender' and '@' not in rule['rule_subject']:
        return (3, rule['rule_subject'])
    # If it's a recipient rule
    elif rule['rule_type'] == 'recipient' and '@' in rule['rule_subject']:
        return (0, rule['rule_subject'])
    elif rule['rule_type'] == 'recipient' and '@' not in rule['rule_subject']:
        return (1, rule['rule_subject'])
    # If it's a wildcard rule
    elif rule['rule_type'] == 'wildcard' and rule['rule_subject'] == '*':
        return (4, '')

sorted_rules = sorted(rules, key=custom_sort)

output= {"has_wildcard": has_wildcard, "rules": sorted_rules}

json.dump(output, fp=sys.stdout)
