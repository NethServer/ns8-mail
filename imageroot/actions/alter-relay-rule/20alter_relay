#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import mail
import agent

request = json.load(sys.stdin)
updatedict = request.copy() # values for SQL statements
updatedict['tls'] = 'encrypt' if request['mandatory_tls'] else 'may'
updatedict['enabled'] = 1 if request['enabled'] else 0

sdb = mail.pcdb_connect()
rulerecord = sdb.execute("SELECT * FROM relayrules WHERE rule_subject=? AND rule_type=?", (
    request["rule_subject"],
    request["rule_type"],
)).fetchone()
if rulerecord is None:
    # Current rule was not found
    agent.set_status('validation-failed')
    json.dump([{'field': 'rule_subject', 'parameter': 'subject', 'value': request["rule_subject"], 'error':'relay_not_found'}], fp=sys.stdout)
    sys.exit(2)

# Authentication is enabled but the password was not changed: retrieve it
# from the database to retain the current value.
if request["username"] and request["password"] == '':
    updatedict["password"] = rulerecord['password']

# validate and obtain the server transport:
probe_credentials = mail.probe_and_validate_smtp_credentials(request["username"], updatedict["password"], request["host"], request["port"], request["mandatory_tls"])
updatedict['transport'] = 'smtps' if probe_credentials['transport_smtps'] else 'smtp'

try:
    # Update the record with rule_subject key:
    sdb.execute("""UPDATE relayrules SET host=:host, port=:port, tls=:tls, transport=:transport, username=:username, password=:password, enabled=:enabled WHERE rule_subject=:rule_subject""", updatedict)
    # Copy auth and transport settings to existing rules with the same host:port key:
    if rulerecord["rule_type"] != "sender":
        sdb.execute("""UPDATE relayrules SET tls=:tls, transport=:transport, username=:username, password=:password WHERE (rule_type != 'sender' AND host=:host AND port=:port)""", updatedict)
except Exception as ex:
    print(agent.SD_ERR+"Failed to update relayrules table.", ex, file=sys.stderr)
    sdb.rollback()
    raise
else:
    sdb.commit()
finally:
    sdb.close()
